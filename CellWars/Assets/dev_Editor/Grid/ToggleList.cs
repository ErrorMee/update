using UnityEngine;using System.Collections;using System.Collections.Generic;using UnityEngine.UI;public class ToggleList : MonoBehaviour{    public GameObject toggleItem;    public BaseList list;    private FightLayerType toggleItemListType;    void Awake()    {        list.itemPrefab = toggleItem;    }    public void InitList(FightLayerType type)    {        toggleItemListType = type;        list.ClearList();        List<config_item_base> datas = new List<config_item_base>();        int i;        switch (toggleItemListType)        {            case FightLayerType.map:                for (i = 0; i < GridMain.resourceMgr.config_map.data.Count;i++ )                {                    datas.Add(GridMain.resourceMgr.config_map.data[i]);                }                break;			case FightLayerType.monster:				for (i = 0; i < GridMain.resourceMgr.config_monster.data.Count; i++)				{					config_monster_item config_monster = GridMain.resourceMgr.config_monster.data[i];                    datas.Add(config_monster);				}				break;            case FightLayerType.bg:                for (i = 0; i < GridMain.resourceMgr.config_cell.data.Count; i++)                {                    config_cell_item config_cell = GridMain.resourceMgr.config_cell.data[i];                    if (config_cell.cell_type == (int)CellType.bg)                    {                        datas.Add(GridMain.resourceMgr.config_cell.data[i]);                    }                }                break;            case FightLayerType.floor:                for (i = 0; i < GridMain.resourceMgr.config_cell.data.Count; i++)                {                    config_cell_item config_cell = GridMain.resourceMgr.config_cell.data[i];                    if (config_cell.cell_type == (int)CellType.floor)                    {                        datas.Add(GridMain.resourceMgr.config_cell.data[i]);                    }                }                break;            case FightLayerType.cell:                for (i = 0; i < GridMain.resourceMgr.config_cell.data.Count; i++)                {                    config_cell_item config_cell = GridMain.resourceMgr.config_cell.data[i];                    if (config_cell.cell_type == (int)CellType.five || config_cell.cell_type == (int)CellType.changer ||				    	config_cell.cell_type == (int)CellType.invade || config_cell.cell_type == (int)CellType.terrain)                    {                        datas.Add(GridMain.resourceMgr.config_cell.data[i]);                    }                }                break;            case FightLayerType.cell_add:                for (i = 0; i < GridMain.resourceMgr.config_cell.data.Count; i++)                {                    config_cell_item config_cell = GridMain.resourceMgr.config_cell.data[i];                    if (config_cell.cell_type == (int)CellType.radiate || config_cell.cell_type == (int)CellType.bomb 				    || config_cell.cell_type == (int)CellType.timer || config_cell.cell_type == (int)CellType.line_bomb				    || config_cell.cell_type == (int)CellType.line_bomb_r || config_cell.cell_type == (int)CellType.three_bomb				    || config_cell.cell_type == (int)CellType.three_bomb_r)                    {                        datas.Add(GridMain.resourceMgr.config_cell.data[i]);                    }                }                break;            case FightLayerType.fence:                for (i = 0; i < GridMain.resourceMgr.config_wall.data.Count; i++)                {                    config_wall_item config_wall = GridMain.resourceMgr.config_wall.data[i];                    datas.Add(config_wall);                }                break;            case FightLayerType.cover:                for (i = 0; i < GridMain.resourceMgr.config_cover.data.Count; i++)                {                    config_cover_item config_cover = GridMain.resourceMgr.config_cover.data[i];                    datas.Add(config_cover);                }                break;            case FightLayerType.fg:                for (i = 0; i < GridMain.resourceMgr.config_cell.data.Count; i++)                {                    config_cell_item config_cell = GridMain.resourceMgr.config_cell.data[i];                    if (config_cell.cell_type == (int)CellType.fg)                    {                        datas.Add(GridMain.resourceMgr.config_cell.data[i]);                    }                }                break;        }        for (i = 0; i < datas.Count; i++)        {            if (type == FightLayerType.cell || type == FightLayerType.cell_add)            {                config_cell_item config_cell = (config_cell_item)datas[i];                CreateItem(datas[i], FightLayerType.cell, config_cell.rotate);            }else if(type == FightLayerType.monster)            {                config_monster_item config_monster = (config_monster_item)datas[i];                CreateItem(datas[i], type, config_monster.rotate);            }            else            {                CreateItem(datas[i], type);            }        }    }    private void CreateItem(config_item_base itemInfo, FightLayerType type, int rotate = 0)    {        GameObject item = list.NewItem();        item.name = "item_" + itemInfo.id;        ToggleItem toggleItem = item.GetComponent<ToggleItem>();		toggleItem.itemInfo = itemInfo;                toggleItem.type = type;        toggleItem.id = itemInfo.id;        toggleItem.icon = itemInfo.icon;        toggleItem.zrotate = rotate * FightConst.ROTATE_BASE;        if (toggleItem.type == FightLayerType.map)        {            toggleItem.toggle.group = list.GetComponent<ToggleGroup>();        }        else        {            toggleItem.toggle.group = transform.parent.GetComponent<ToggleGroup>();        }        toggleItem.toggle.onValueChanged.AddListener(toggleItem.OnSelectChange);    }}